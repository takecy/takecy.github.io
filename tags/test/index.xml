<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>test on blog &lt;- takecy</title>
    <link>/tags/test/</link>
    <description>Recent content in test on blog &lt;- takecy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://github.com/takecy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;takecy&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 15 Sep 2018 17:52:49 +0900</lastBuildDate>
    
	<atom:link href="/tags/test/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GoでABテスト対象のユーザーを振り分けるライブラリを書いた</title>
      <link>/posts/grouping-id-for-ab-testing-in-golang/</link>
      <pubDate>Sat, 15 Sep 2018 17:52:49 +0900</pubDate>
      
      <guid>/posts/grouping-id-for-ab-testing-in-golang/</guid>
      <description>事前準備として、
 ABテストを定義 (名前、割合etc..) 全ユーザーをグルーピング  そしてリクエストごとに、
 リクエスト元ユーザーの所属グループの決定 出し分け 結果のロギング 検証 繰り返し&amp;hellip;  このパッケージは、「事前準備」と「各リクエストの1」をサーバーサイドでやるためのもので、
 あるABテストに対応するグループを定義 (e.g. group-A, group-B) グループに適用する割合を定義 (e.g. 80:20) 上記定義で初期化したインスタンスに、id (e.g. user-001)を渡す 所属しているグループを返す (e.g. group-A)  というすごくシンプルなもの。
基本的な使用例はこんな感じ。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/takecy/grouping&amp;#34; ) // SimpleElem implements `grouping.Elementer` type SimpleElem struct { name string ratio int } func (e *SimpleElem) GetName() string { return e.name } func (e *SimpleElem) GetRatio() int { return e.ratio } func (e *SimpleElem) SetRatio(r int) { e.</description>
    </item>
    
    <item>
      <title>1.10以降のGoのMultiPackageテスト</title>
      <link>/posts/golang-multi-package-test/</link>
      <pubDate>Sat, 26 May 2018 10:26:50 +0900</pubDate>
      
      <guid>/posts/golang-multi-package-test/</guid>
      <description>以前は複数のパッケージのカバレッジを取るのにこんなことをやっていた。
#!/bin/bash  set -e echo &amp;#34;&amp;#34; &amp;gt; coverage.txt go test -i ./... for d in $(go list ./...); do go test -race -coverprofile=profile.out -covermode=atomic $d if [ -f profile.out ]; then cat profile.out &amp;gt;&amp;gt; coverage.txt rm profile.out fi done 1.10以降はこれでいけるようになった。
go test -race -coverprofile=coverage.txt -covermode=atomic ./... 楽チン！</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on takecy.txt</title>
    <link>http://blog.takecy.net/tags/golang/</link>
    <description>Recent content in Golang on takecy.txt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 Aug 2015 23:17:30 +0900</lastBuildDate>
    <atom:link href="http://blog.takecy.net/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Go言語の依存パッケージ管理の闇</title>
      <link>http://blog.takecy.net/posts/golang-package-godep/</link>
      <pubDate>Sun, 16 Aug 2015 23:17:30 +0900</pubDate>
      
      <guid>http://blog.takecy.net/posts/golang-package-godep/</guid>
      <description>

&lt;p&gt;複数人で開発している場合、各メンバーのローカル環境が揃っていることは重要なこと。&lt;br /&gt;
OSや言語のランタイムのバージョンはもちろんだけど、
依存しているパッケージのバージョンを同じにしておくことは重要。&lt;br /&gt;
俺はテスト通ってるけどTravisさんでは通らないとかマジいらっとするし、
バグった時の再現性とかもろもろ問題が出てくるので、環境の同期は重要。&lt;/p&gt;

&lt;p&gt;例えば、JavaではMaven+pom.xmlやGradle+build.gradle、Nodeならnpm+package.jsonなところを、
Goではどうやるんだっていう話。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h3 id=&#34;goで依存パッケージを取得する:53a1ac720bbfb4a915b7e7d27b1d725e&#34;&gt;Goで依存パッケージを取得する&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt; go get github.com/google/go-github/github
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上。&lt;br /&gt;
 簡単。これは捗る！&lt;br /&gt;
 と思いきや、実際の開発ではいろいろ問題が発生する。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h3 id=&#34;バージョンいくつなんだよ問題:53a1ac720bbfb4a915b7e7d27b1d725e&#34;&gt;バージョンいくつなんだよ問題&lt;/h3&gt;

&lt;p&gt;Goは、パッケージ取得の仕組み(&lt;code&gt;go get hoge/hoge&lt;/code&gt; のこと)は言語レベルで存在するが、
パッケージの列挙とバージョンを管理する仕組みは存在しない。&lt;br /&gt;
「このプロジェクトで使われているパッケージはA(ver0.9)とB(ver1.2)である。」&lt;br /&gt;
というのを表現する方法は&lt;strong&gt;無い&lt;/strong&gt;。&lt;br /&gt;
よって各メンバーが、README等をみながら、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get A
go get B
go get C
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;をぽちぽちやらなくてはいけない。&lt;br /&gt;
また、go get したタイミングによっては依存しているパッケージの別のバージョンが入ってしまう。&lt;br /&gt;
なんてったって、go get にはバージョンを&lt;strong&gt;指定しない&lt;/strong&gt;のだから、何が落ちてきてるのかわからん。&lt;br /&gt;
Goの思想としては常に最新バージョン使おうぜ、ということらしいが、
そのことと、メンバー間の環境の同期はまた別の話だよね。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h3 id=&#34;別のプロジェクトでも使ってる問題:53a1ac720bbfb4a915b7e7d27b1d725e&#34;&gt;別のプロジェクトでも使ってる問題&lt;/h3&gt;

&lt;p&gt;Goのプロジェクトとして、AとBがあって、両方でパッケージKを使ってるとする。&lt;br /&gt;
「AではK:ver1.1.2を使って、BではK:ver1.1.3を使う」
ということは&lt;strong&gt;できない&lt;/strong&gt;。&lt;br /&gt;
GOPATHをそれぞれで設定しておいて、いじるときにいちいち切り替えれば出来るんだろうけど、
基本的にはGOPATHは一個だけ設定するのが良いとされているので、AとBは同じバージョンのKを参照せざるを得なくなる。&lt;br /&gt;
これは辛い。。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h3 id=&#34;godep:53a1ac720bbfb4a915b7e7d27b1d725e&#34;&gt;Godep&lt;/h3&gt;

&lt;p&gt;そこで登場するのがプロジェクト毎に依存関係を指定、管理できるツール、&lt;a href=&#34;https://github.com/tools/godep&#34;&gt;Godep&lt;/a&gt;。&lt;br /&gt;
安心のGithub製。&lt;br /&gt;
そのプロジェクトで使っているパッケージとバージョン(正確にはコミットsha)を&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;godep save ./...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で記録(その時点のスナップショット的な感じ)できる。&lt;br /&gt;
新しく &lt;code&gt;Godep&lt;/code&gt; なるディレクトリと、&lt;code&gt;Godep.json&lt;/code&gt; というJSONファイルが生成される。&lt;br /&gt;
このディレクトリはGitのバージョン管理対象にする。&lt;/p&gt;

&lt;p&gt;新しいメンバーは、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;godep restore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で同じパッケージの同じバージョンを GOPATH配下に配置できる。&lt;br /&gt;
これは捗る！&lt;/p&gt;

&lt;p&gt;ここで言う、他のメンバーとは、Travis等のCIツールも含まれる。&lt;br /&gt;
ちなみに、Godepは&lt;a href=&#34;http://docs.travis-ci.com/user/languages/go/&#34;&gt;Travisが対応している&lt;/a&gt;ので、Goをビルドする時にちょっと楽。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h3 id=&#34;まとめ:53a1ac720bbfb4a915b7e7d27b1d725e&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;Goには、依存パッケージを取得する仕組みはあるが、依存の列挙、バージョンを管理する仕組みはない。&lt;br /&gt;
なので、別途Godepなどのツールで管理しとかないとチーム開発やCIは辛いかも。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>これからGoやる人のためのGOPATH</title>
      <link>http://blog.takecy.net/posts/golang-env-gopath/</link>
      <pubDate>Wed, 05 Aug 2015 00:52:24 +0900</pubDate>
      
      <guid>http://blog.takecy.net/posts/golang-env-gopath/</guid>
      <description>

&lt;p&gt;Goはじめて3ヶ月。&lt;br /&gt;
Goいいな、Goクソだなと日々葛藤。&lt;/p&gt;

&lt;p&gt;Goをこれからはじめようという人が迷いそうな(俺が迷った)&lt;code&gt;GOPATH&lt;/code&gt; について。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h3 id=&#34;goのインストール:42557be9981a6cfa7f814dbb3f6accc9&#34;&gt;Goのインストール&lt;/h3&gt;

&lt;p&gt;インストール自体はbrewで速攻終わる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;問題はこの後の&lt;code&gt;$GOPATH&lt;/code&gt;の設定。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h3 id=&#34;gopathって何:42557be9981a6cfa7f814dbb3f6accc9&#34;&gt;GOPATHって何&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://golang-jp.org/doc/code.html#GOPATH&#34;&gt;http://golang-jp.org/doc/code.html#GOPATH&lt;/a&gt;
&amp;gt;GOPATH環境変数はワークスペースの場所を示してします。&lt;/p&gt;

&lt;p&gt;そのままなのだが、つまり、&lt;br /&gt;
1. Goを書くのは全部このパス下でやってね&lt;br /&gt;
2. Go書く上で依存してるライブラリのソースも全部このパスに入るよ&lt;/p&gt;

&lt;p&gt;ということで、例にあるようにそのまま、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ export GOPATH=$HOME/go
$ export PATH=$PATH:$GOPATH/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としているが、特に困っていない。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h3 id=&#34;goを書く:42557be9981a6cfa7f814dbb3f6accc9&#34;&gt;Goを書く&lt;/h3&gt;

&lt;p&gt;じゃGo書くぜってことになるが、&lt;strong&gt;GOPATH直下に書くわけではない&lt;/strong&gt; というのがめんどくさいところ。&lt;/p&gt;

&lt;p&gt;まず、Goを書く時は、&lt;strong&gt;Githubに公開する前提&lt;/strong&gt; と考えておいたほうがよい。
というのも、Goを書いていると頻出するが、外部ライブラリの import文はほぼ、GithubのURLになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;fmt&amp;quot; // 標準パッケージ
import &amp;quot;github.com/takecy/hoge&amp;quot; // OSSのライブラリ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;github.com/{account_name}/{repository_name}&lt;/code&gt; でimportできるステキ仕様。
そしてライブラリのメソッドとか呼び出すためには、ソースコードを取得しないといけないので、下記を実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go get github.com/takecy/hoge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで、&lt;code&gt;GOPATH&lt;/code&gt; が登場する。&lt;br /&gt;
このライブラリがダウンロードされ、配置されるパスは
&lt;code&gt;$GOPATH/src/github.com/takecy/hoge&lt;/code&gt;&lt;br /&gt;
になる。&lt;br /&gt;
自分のGoのプロジェクトもこれと同じように、
&lt;code&gt;$GOPATH/src/github.com/{account_name}/{repository_name}&lt;/code&gt;&lt;br /&gt;
ディレクトリを作って、そこにGoソースを作成してスタートする。&lt;/p&gt;

&lt;p&gt;Githubで公開する気とか無いし、、と思っても、このパスで作るのがおすすめ。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h4 id=&#34;まとめ:42557be9981a6cfa7f814dbb3f6accc9&#34;&gt;まとめ&lt;/h4&gt;

&lt;p&gt;Goやり始めた当初は、元々&lt;code&gt;$HOME/git&lt;/code&gt;下に全部Github関連入れていたので、移動したくなく、GOPATHにシンボリックリンク貼ったりとかして抵抗していたのだが、結局Go関連は、全部移動することに。。&lt;br /&gt;
同じGithubからのソースなのに、全然別のディレクトリになっているもやもやは地味にストレス。&lt;br /&gt;
が、GithubのURLをimportに書けるというのはすごくいい。&lt;br /&gt;
例えばJavaでよくある、「このライブラリすごくよさそうだけど、mavenにあがってねーじゃん、、」ということもない。&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s write Go。&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
どうでもいいけど、Goのライブラリ名はダジャレがちらほら。&lt;br /&gt;
例えばRedisのドライバは &lt;a href=&#34;https://github.com/garyburd/redigo&#34;&gt;redigo&lt;/a&gt; 。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
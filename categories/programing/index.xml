<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programing on blog &lt;- takecy</title>
    <link>http://localhost:1313/categories/programing/</link>
    <description>Recent content in Programing on blog &lt;- takecy</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 15 Oct 2022 14:21:17 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/programing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>go.modファイル内のGoバージョンを更新する</title>
      <link>http://localhost:1313/posts/golang-mod-version-update/</link>
      <pubDate>Sat, 15 Oct 2022 14:21:17 +0900</pubDate>
      <guid>http://localhost:1313/posts/golang-mod-version-update/</guid>
      <description>&lt;p&gt;&lt;code&gt;go.mod&lt;/code&gt; ファイルのバージョン部分を手動ではなく、goコマンドで更新する。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-:go.mod&#34; data-lang=&#34;:go.mod&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;module github.com&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;takecy&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;git&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;here&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go &lt;span style=&#34;color:#ae81ff&#34;&gt;1.18&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;←&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;これ&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;require (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;github.com&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;fatih&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;color v1.&lt;span style=&#34;color:#ae81ff&#34;&gt;13.0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;github.com&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;matryer&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;is v1.&lt;span style=&#34;color:#ae81ff&#34;&gt;4.0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;github.com&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;pkg&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;errors v0.&lt;span style=&#34;color:#ae81ff&#34;&gt;9.1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;golang.org&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;sync v0.&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20220929204114&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;fcdb60fdcc0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更新手順&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go mod edit -go&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1.19&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go mod tidy&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-:go.mod&#34; data-lang=&#34;:go.mod&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;module github.com&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;takecy&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;git&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;here&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go &lt;span style=&#34;color:#ae81ff&#34;&gt;1.19&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;←&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;更新される&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;require (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;github.com&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;fatih&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;color v1.&lt;span style=&#34;color:#ae81ff&#34;&gt;13.0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;github.com&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;matryer&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;is v1.&lt;span style=&#34;color:#ae81ff&#34;&gt;4.0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;github.com&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;pkg&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;errors v0.&lt;span style=&#34;color:#ae81ff&#34;&gt;9.1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;golang.org&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;sync v0.&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20220929204114&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;fcdb60fdcc0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;go mod tidy&lt;/code&gt; をしないとエラーが出る。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GoでABテスト対象のユーザーを振り分けるライブラリを書いた</title>
      <link>http://localhost:1313/posts/grouping-id-for-ab-testing-in-golang/</link>
      <pubDate>Sat, 15 Sep 2018 17:52:49 +0900</pubDate>
      <guid>http://localhost:1313/posts/grouping-id-for-ab-testing-in-golang/</guid>
      <description>&lt;div style=&#34;padding:0.2em; width:60%;&#34;&gt;&#xA;            &lt;a href=&#34;https://github.com/takecy/grouping&#34;&gt;&#xA;                &lt;img src=&#34;https://opengraph.githubassets.com/7641830e5fc271722b5b510ac7e75675f08c93084c8b6acdf91f866d52e5b175/takecy/grouping&#34; alt=&#34;GitHub - takecy/grouping: simple id grouping package in golang. Useful for AB testing.&#34; title=&#34;GitHub - takecy/grouping: simple id grouping package in golang. Useful for AB testing.&#34;&gt;&#xA;            &lt;/a&gt;&#xA;        &lt;/div&gt;&#xA;    &#xA;&#xA;&lt;h3 id=&#34;abテストとは&#34;&gt;ABテストとは&lt;/h3&gt;&#xA;&#xA;&#xA;    &#xA;        &#xA;        &#xA;        &#xA;        &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                    &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                    &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                    &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                    &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                &#xA;            &#xA;                &#xA;                &#xA;                &#xA;                &#xA;                &#xA;            &#xA;            &#xA;        &#xA;&#xA;        &#xA;        &#xA;            &#xA;                &#xA;                    &#xA;                &#xA;            &#xA;        &#xA;&#xA;        &lt;a href=&#34;https://www.assion.co.jp/blog/guide-of-abtesting/&#34; title=&#34;ABテストとは？ 今さら聞けないABテストの基礎中の基礎まとめ | 株式会社SHIFT &#34; alt=&#34;ABテストとは？ 今さら聞けないABテストの基礎中の基礎まとめ | 株式会社SHIFT &#34; style=&#34;padding: 12px;border: solid 1px ;display: flex;text-decoration: none;&#34; onMouseOver=&#34;this.style.opacity=&#39;0.9&#39;&#34;&gt;&#xA;            &lt;div style=&#34;flex-shrink: 0;&#34;&gt;&#xA;                &lt;img src=&#34;http://localhost:1313/guide1_2219364545356773180.png&#34; title=&#34;ABテストとは？ 今さら聞けないABテストの基礎中の基礎まとめ | 株式会社SHIFT &#34; alt=&#34;ABテストとは？ 今さら聞けないABテストの基礎中の基礎まとめ | 株式会社SHIFT &#34; width=&#34;100&#34; height=&#34;100&#34; style=&#34;object-fit: contain;&#34;&gt;&#xA;            &lt;/div&gt;&#xA;            &lt;div style=&#34;margin-left: 10px;&#34;&gt;&#xA;                &lt;h2 style=&#34;margin: 0;padding-bottom: 13px;border: none;font-size: 16px;&#34;&gt;&#xA;                    ABテストとは？ 今さら聞けないABテストの基礎中の基礎まとめ | 株式会社SHIFT &#xA;                &lt;/h2&gt;&#xA;                &lt;p style=&#34;margin: 0;font-size: 13px;word-break: break-word;display: -webkit-box;-webkit-box-orient: vertical;-webkit-line-clamp: 3;overflow: hidden;&#34;&gt;&#xA;                    ABテストツールVWOの日本唯一のプレミアムパートナーとして、多くのクライアント様のCROに取り組んできたABテストのプロフェッショナルである我々アッション（現・SHIFT）が、今回ABテストの概念・なぜ行う必要があるのか・実施する際のポイント等をまとめましたので、是非ご覧いただければと思います。&#xA;                &lt;/p&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/a&gt;&#xA;    &#xA;&#xA;&lt;p&gt;ABテストを実施するには、いくつかの要素があり、大きく下記がある。&lt;br&gt;&#xA;事前準備として、&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.10以降のGoのMultiPackageテスト</title>
      <link>http://localhost:1313/posts/golang-multi-package-test/</link>
      <pubDate>Sat, 26 May 2018 10:26:50 +0900</pubDate>
      <guid>http://localhost:1313/posts/golang-multi-package-test/</guid>
      <description>&lt;p&gt;以前は複数のパッケージのカバレッジを取るのにこんなことをやっていた。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set -e&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &amp;gt; coverage.txt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go test -i ./...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; d in &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;go list ./...&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    go test -race -coverprofile&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;profile.out -covermode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;atomic $d&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -f profile.out &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cat profile.out &amp;gt;&amp;gt; coverage.txt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        rm profile.out&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;1.10以降はこれでいけるようになった。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go test -race -coverprofile=coverage.txt -covermode=atomic ./...&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;楽チン！&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goプロジェクトでvendorディレクトリをバージョン管理すべきなのか</title>
      <link>http://localhost:1313/posts/golang-vendor-versioned/</link>
      <pubDate>Sun, 04 Mar 2018 11:12:53 +0900</pubDate>
      <guid>http://localhost:1313/posts/golang-vendor-versioned/</guid>
      <description>&lt;p&gt;Goプロジェクトの依存パッケージは、 &lt;a href=&#34;https://github.com/golang/dep&#34;&gt;dep&lt;/a&gt; などのツールにより  &lt;code&gt;vendor&lt;/code&gt; ディレクトリに入るけど、「vendorをバージョン管理するべきかどうか」で定期的にチーム内で議論になる。&lt;/p&gt;&#xA;&lt;p&gt;管理する場合、しない場合、それぞれの場合のメリット・デメリットをあげてみつつ考えてみる。&lt;/p&gt;&#xA;&lt;h2 id=&#34;vendorをバージョン管理する場合&#34;&gt;vendorをバージョン管理する場合&lt;/h2&gt;&#xA;&lt;h3 id=&#34;メリット&#34;&gt;メリット&lt;/h3&gt;&#xA;&lt;h4 id=&#34;動かすまでが楽&#34;&gt;動かすまでが楽&lt;/h4&gt;&#xA;&lt;p&gt;何よりもこれ。cloneすればすぐbuild/runできる。動いている状態の完全なアプリケーション/パッケージとしてあがっているのだから当然。特定時点のスナップショット的なものになっているので、とにかく最初の一歩が早い。&lt;/p&gt;&#xA;&lt;h3 id=&#34;デリット&#34;&gt;デリット&lt;/h3&gt;&#xA;&lt;h4 id=&#34;リポ内のファイル数が爆増する&#34;&gt;リポ内のファイル数が爆増する&lt;/h4&gt;&#xA;&lt;p&gt;cloneするのが遅い。。大きめのリポジトリになると結構待たされる。&#xA;あと検索が弱くなる。vendor内も引っかかるのでGitHub Web上での検索は諦め気味。リポジトリを落としてからローカルで探すとこが多い。&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;vendorをバージョン管理しない場合&#34;&gt;vendorをバージョン管理しない場合&lt;/h2&gt;&#xA;&lt;h3 id=&#34;メリット-1&#34;&gt;メリット&lt;/h3&gt;&#xA;&lt;h4 id=&#34;リポジトリが綺麗&#34;&gt;リポジトリが綺麗&lt;/h4&gt;&#xA;&lt;p&gt;この問題の先輩である&lt;code&gt;npm&lt;/code&gt;は&lt;code&gt;node_modules&lt;/code&gt;の中身を全部GitHubにいれたりしない。&#xA;GitHubが提供する &lt;a href=&#34;https://github.com/github/gitignore/blob/master/Node.gitignore#L36&#34;&gt;.gitignore&lt;/a&gt; にも&lt;code&gt;node_modules&lt;/code&gt;が書いてある。(&lt;a href=&#34;https://github.com/github/gitignore/blob/master/Go.gitignore&#34;&gt;Go&lt;/a&gt;に&lt;code&gt;vendor&lt;/code&gt;はいない)&lt;br&gt;&#xA;GitHubWeb上で検索しやすくもなる。&lt;/p&gt;&#xA;&lt;h3 id=&#34;デメリット&#34;&gt;デメリット&lt;/h3&gt;&#xA;&lt;h4 id=&#34;動かすまでが大変&#34;&gt;動かすまでが大変&lt;/h4&gt;&#xA;&lt;p&gt;&lt;code&gt;dep&lt;/code&gt;が&lt;code&gt;npm&lt;/code&gt;ほど洗練されていない、またGoの依存はGitHubのURLを指定できるようになっているのもあり、masterブランチを指定してる場合など悲惨だ。&#xA;このアプリケーション/パッケージが動いた時のmasterの状態などわかるはずもない。&lt;code&gt;Gopkg.lock&lt;/code&gt;にrevisionとしてcommit shaが記録されているものの、force pushされたりするとあてにならないし、そもそも &lt;code&gt;dep ensure&lt;/code&gt; 自体が結構な割合で失敗する。&lt;/p&gt;&#xA;&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;&#xA;&lt;p&gt;結局、一長一短で、メリット・デメリットが反対になっている。&#xA;個人的には &lt;code&gt;動かすまでが楽&lt;/code&gt; これをものすごく重要だと感じており、Go自体のワンバイナリで気軽にどこでも実行できるというメリットとともに、 &lt;code&gt;リポジトリをCloneしたらすぐrunできる&lt;/code&gt; というのは素晴らしいと思っている。&lt;/p&gt;&#xA;&lt;p&gt;また、マイクロサービス化が進んでいくと、1つのアプリケーションを構築するのに複数のリポジトリを使うことになり、1つの修正や機能の実装のために複数リポジトリへの変更が必要になってくる。その時、各リポジトリのvendorを復元する手間が無視できないコストになる。本質的でないこの作業にコストがかかるのは色々ストレスだし、とにかくツライ。。&lt;/p&gt;&#xA;&lt;p&gt;結果、今のPJでは。&lt;code&gt;vendorもバージョン管理する(GitHubに全部突っ込む)&lt;/code&gt; にしていて、今のところ快適に運用できている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goの依存管理ツールのdepのpruneがdeprecatedになった</title>
      <link>http://localhost:1313/posts/golang-dep-prune-deprecated/</link>
      <pubDate>Sat, 03 Feb 2018 01:36:11 +0900</pubDate>
      <guid>http://localhost:1313/posts/golang-dep-prune-deprecated/</guid>
      <description>&lt;p&gt;Goの依存関係管理には&lt;a href=&#34;https://github.com/golang/dep&#34;&gt;dep&lt;/a&gt;がデファクトだし、使っているのだが、&#xA;最近 &lt;code&gt;prune&lt;/code&gt; コマンドがdeprecatedされた。&lt;/p&gt;&#xA;&lt;h3 id=&#34;depのprune&#34;&gt;depのprune&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dep prune -v&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このコマンドは、&lt;code&gt;ensure&lt;/code&gt; で山盛り追加されるvendorから、使用していないpackageを除外してくれて、レポジトリが軽くなるので気に入ってよく使っていた。&#xA;Makefileにもだいたい以下のように書いていた。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dep ensure -update -v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; dep prune -v&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;実行時に警告が&#34;&gt;実行時に警告が&lt;/h3&gt;&#xA;&lt;p&gt;多分0.4からこういう警告が出るようになった。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Pruning is now performed automatically by dep ensure.&#xA;Set prune settings in Gopkg.toml and it it will be applied when running ensure.&#xA;&#xA;This command currently still prunes as it always has, to ease the transition.&#xA;However, it will be removed in a future version of dep.&#xA;&#xA;Now is the time to update your Gopkg.toml and remove `dep prune` from any scripts.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;意訳&lt;/p&gt;</description>
    </item>
    <item>
      <title>Timezoneが取れるalpineのDockerイメージを作る</title>
      <link>http://localhost:1313/posts/golang-docker-alpine-timezone/</link>
      <pubDate>Sat, 03 Feb 2018 01:07:23 +0900</pubDate>
      <guid>http://localhost:1313/posts/golang-docker-alpine-timezone/</guid>
      <description>&lt;p&gt;Goで書いたアプリのDockerイメージをできるだけ小さくしようとして、&#xA;&lt;a href=&#34;https://docs.docker.com/develop/develop-images/multistage-build/&#34;&gt;multi stage build&lt;/a&gt;にそってやったら、timezone情報が取れなくてpanicが発生して(&amp;lsquo;A`)になったので、その対応策について。&lt;/p&gt;&#xA;&lt;p&gt;コード全体はこちら。&lt;br&gt;&#xA;&lt;a href=&#34;https://github.com/takecy/tz-sample&#34;&gt;&lt;img src=&#34;https://gh-card.dev/repos/takecy/tz-sample.svg?fullname&#34;&gt;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;h3 id=&#34;panic-になるコード&#34;&gt;Panic になるコード&lt;/h3&gt;&#xA;&lt;p&gt;普通にmulti stage buildでalpineにビルド済イメージを &lt;code&gt;COPY&lt;/code&gt; して実行すると、下記コードはpanicする。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;jst&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;LoadLocation&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Asia/Tokyo&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    panic(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;alpineは &lt;code&gt;/etc/localtime&lt;/code&gt; がないため。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;panic: open /usr/local/go/lib/time/zoneinfo.zip: no such file or directory&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;goroutine &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;running&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main.main&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        /go/src/github.com/takecy/tz/main.go:11 +0x22b&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make: *** &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;run_alpine&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Error &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;対応&#34;&gt;対応&lt;/h3&gt;&#xA;&lt;p&gt;対応は難しいことはなく、単に &lt;code&gt;tzdata&lt;/code&gt; を入れればよい。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apk --no-cache add tzdata&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;全体の例&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; golang:1.9.3-alpine AS build&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COPY&lt;/span&gt; . $GOPATH/src/github.com/takecy/tz&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; $GOPATH/src/github.com/takecy/tz&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; go build -o tz .&lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mv tz /usr/local/bin/&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; alpine:3.6&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apk --no-cache add tzdata&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COPY&lt;/span&gt; --from&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;build /usr/local/bin/tz /usr/local/bin/&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CMD&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tz&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&lt;a href=&#34;https://github.com/takecy/tz-sample&#34;}&gt;&#xA;  &lt;img src=&#34;http://favicon.hatena.ne.jp/?url=https%3a%2f%2fgithub.com%2ftakecy%2ftz-sample&#34; style=&#34;float:left;margin:5px 5px 0px 5px&#34; /&gt;&#xA;  takecy/tz-sample&#xA;&lt;/a&gt;&#xA;&lt;br/&gt;</description>
    </item>
    <item>
      <title>UbuntuにGoをインストールしたDokcerイメージを作る</title>
      <link>http://localhost:1313/posts/golang-docker-ubuntu-install/</link>
      <pubDate>Sat, 24 Oct 2015 23:18:26 +0900</pubDate>
      <guid>http://localhost:1313/posts/golang-docker-ubuntu-install/</guid>
      <description>&lt;p&gt;Dokcernizeってますか？&#xA;最近やっとちょっとだけDockerさんに話しかけたりしています。&lt;/p&gt;&#xA;&lt;p&gt;UbuntuにGo入れたイメージを作るDokcerfileの大事なところはこんなです。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; wget https://storage.googleapis.com/golang/go1.5.1.linux-amd64.tar.gz&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; tar -C /usr/local -xf go1.5.1.linux-amd64.tar.gz&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ENV&lt;/span&gt; PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PATH:/usr/local/go/bin&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ENV&lt;/span&gt; GOPATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$HOME/go&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ENV&lt;/span&gt; PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$GOPATH/bin:$PATH&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;一方、Vagrantはそれはそれで、sshしてhogehogeって感じがサーバいじるのと似ててとっつきやすい。&#xA;クラウド()になって、&#xA;sshしてあれこれインストールしてサーバ設定というのはもうなくなっちゃったよね。&lt;/p&gt;&#xA;&lt;p&gt;最近は、サーバ設定(というかインスタンス設定)はTerraformだし、ルーチン処理やリリースはAnsibleだし。&#xA;かといって、sshも必要で、shellスクリプトは前より書くようになったんじゃないかと思うくらいだし。&lt;/p&gt;&#xA;&lt;p&gt;自分の場合、一応アプリケーションエンジニアというくくりになるのだけど、&#xA;こんなにインフラ寄りの作業をやっていることにふと気づいて驚いている。&lt;/p&gt;&#xA;&lt;p&gt;今後もっと、アプリの人はインフラの知識を、インフラの人はアプリの知識をな感じで、&#xA;近づいていくんだろうか。&lt;br&gt;&#xA;システム開発における、エンジニア一人の担当範囲が広くなっていってる感じ。&lt;br&gt;&#xA;なんて面白い時代だ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goとマイクロサービス</title>
      <link>http://localhost:1313/posts/golang-microservice/</link>
      <pubDate>Sun, 04 Oct 2015 22:29:08 +0900</pubDate>
      <guid>http://localhost:1313/posts/golang-microservice/</guid>
      <description>&lt;p&gt;マイクロサービスの定義としては&lt;br&gt;&#xA;「あるサービスが、独立した小さなサービスの集合で構成される」&lt;br&gt;&#xA;というのが一般的？で、俺もそう思っている。&lt;/p&gt;&#xA;&lt;p&gt;Goはこのマイクロサービス的なサービス開発に適している気がする。&lt;/p&gt;&#xA;&lt;h3 id=&#34;ワンバイナリサービスの単位&#34;&gt;ワンバイナリ=サービスの単位&lt;/h3&gt;&#xA;&lt;p&gt;Goの最大のメリットと考えているのは、&lt;br&gt;&#xA;ビルドしたら実行可能なバイナリが1個吐き出されて、ミドルウェア等の設定が不要。&lt;br&gt;&#xA;というのは、&lt;a href=&#34;http://localhost:1313/posts/golang-good-bad/&#34;&gt;過去&lt;/a&gt;にも書いた。&lt;/p&gt;&#xA;&lt;p&gt;この実行可能なバイナリをマイクロサービスでいうところの「小さなサービス」とすると、とてもしっくり来る感じ。&lt;/p&gt;&#xA;&lt;h3 id=&#34;バイナリgoパッケージサーバインスタンスの単位&#34;&gt;バイナリ=Goパッケージ=サーバインスタンスの単位&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;API&lt;/li&gt;&#xA;&lt;li&gt;Batch A&lt;/li&gt;&#xA;&lt;li&gt;Batch B&lt;/li&gt;&#xA;&lt;li&gt;Proxy(image)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;で構成されるサービスがあったとして、全部Goで書いたとする。&lt;br&gt;&#xA;それぞれがGoプロジェクトの1パッケージに対応し、そのパッケージ毎にバイナリを生成し、&#xA;バイナリごとにサーバインスタンスを割り当てる感じになる。&lt;/p&gt;&#xA;&lt;p&gt;まさにマイクロサービス。&lt;/p&gt;&#xA;&lt;h3 id=&#34;まとめ&#34;&gt;まとめ&lt;/h3&gt;&#xA;&lt;p&gt;GoはProxyサーバみたいな特定の用途に特化した(アドホックな)処理を、&#xA;1個のバイナリとしてまとめられるので、Goで全部やってると勝手にマイクロサービスっぽくなるよね&lt;br&gt;&#xA;というお話。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goのいいとこ悪いとこを1個づつあげる</title>
      <link>http://localhost:1313/posts/golang-good-bad/</link>
      <pubDate>Wed, 16 Sep 2015 22:54:02 +0900</pubDate>
      <guid>http://localhost:1313/posts/golang-good-bad/</guid>
      <description>&lt;p&gt;Goのいいところ悪いところをそれぞれ1個だけ挙げてみる。&lt;/p&gt;&#xA;&lt;h2 id=&#34;いいところ&#34;&gt;いいところ&lt;/h2&gt;&#xA;&lt;h3 id=&#34;デプロイが簡単&#34;&gt;デプロイが簡単&lt;/h3&gt;&#xA;&lt;p&gt;もはやこれだけで、Goを使う価値があるといっていいほど。&lt;br&gt;&#xA;&lt;code&gt;go build&lt;/code&gt; からの、生成されたバイナリをサーバへ送って実行。&lt;br&gt;&#xA;以上終わり。&lt;/p&gt;&#xA;&lt;p&gt;これはすごい。。サーバ側は一切の設定、ミドルのインストールがいらない。&lt;br&gt;&#xA;nodeやJVMなどの実行環境が不要。すごい。&lt;/p&gt;&#xA;&lt;p&gt;よく言われる、Goのメリットだけど、本当にすごい。&lt;br&gt;&#xA;ビルドしたら実行可能な単一のバイナリが吐きだされる。&lt;br&gt;&#xA;&lt;a href=&#34;https://github.com/mitchellh/gox&#34;&gt;プラットフォームごとにビルド&lt;/a&gt;するのも簡単。&lt;/p&gt;&#xA;&lt;p&gt;この点の別のメリットとして、Go自体ののバージョンアップが簡単というのがある。&lt;br&gt;&#xA;言語のバージョンが上がっても、ビルド後のバイナリとして正しく動いていれば、サーバ側はなんの変更もいらない。&#xA;バイナリを差し替えるだけ。&lt;br&gt;&#xA;nodeやJVMだと、バージョンアップは大仕事だけど、Go簡単すぎ。すごい。&lt;/p&gt;&#xA;&lt;h2 id=&#34;悪いところ&#34;&gt;悪いところ&lt;/h2&gt;&#xA;&lt;h3 id=&#34;型が中途半端&#34;&gt;型が中途半端&lt;/h3&gt;&#xA;&lt;p&gt;これもよく言われているけど、型システム微妙。&lt;br&gt;&#xA;これの最大の弊害は抽象化のしづらさにある。&lt;br&gt;&#xA;色んなライブラリを見たつもりだけど、結構出てくるのが&lt;br&gt;&#xA;&lt;code&gt;interface{}&lt;/code&gt; &lt;code&gt;map[string]interface{}&lt;/code&gt;&lt;br&gt;&#xA;が引数、戻り値。&lt;br&gt;&#xA;&lt;strong&gt;型意味ねえ。&lt;/strong&gt;&lt;br&gt;&#xA;Goは静的型付け言語に分類されるが、抽象化しづらいので結局「何でも入る型」(Javaで言うならObject型)を使っちゃって、コンパイラの恩恵が少ない。&lt;br&gt;&#xA;&lt;a href=&#34;https://github.com/golang/go/issues/21132&#34;&gt;ジェネリクスに関する議論&lt;/a&gt; は色々なされているようだけど、どうなるか。&lt;/p&gt;&#xA;&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;&#xA;&lt;p&gt;悪いところもあるけれど、「デプロイが簡単」「バージョンアップが簡単」のメリットを捨てるほどではない。&lt;br&gt;&#xA;という結論に今のところなっている感じ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go言語でループ</title>
      <link>http://localhost:1313/posts/golang-loop/</link>
      <pubDate>Sun, 30 Aug 2015 19:51:31 +0900</pubDate>
      <guid>http://localhost:1313/posts/golang-loop/</guid>
      <description>&lt;p&gt;今でもたまにやらかすのでメモっておく。&lt;/p&gt;&#xA;&lt;p&gt;①&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;users&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;take&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hoge&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;moge&amp;#34;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;users&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;users&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]) &lt;span style=&#34;color:#75715e&#34;&gt;// i is index&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;②&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;users&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;take&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hoge&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;moge&amp;#34;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;users&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// user is value copy&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;③&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;users&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;take&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hoge&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;moge&amp;#34;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;users&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// user is value copy&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;①が一番早い。&#xA;でも②③の方が読みやすい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go言語の依存パッケージ管理の闇</title>
      <link>http://localhost:1313/posts/golang-package-godep/</link>
      <pubDate>Sun, 16 Aug 2015 23:17:30 +0900</pubDate>
      <guid>http://localhost:1313/posts/golang-package-godep/</guid>
      <description>&lt;p&gt;複数人で開発している場合、各メンバーのローカル環境が揃っていることは重要なこと。&lt;br&gt;&#xA;OSや言語のランタイムのバージョンはもちろんだけど、&#xA;依存しているパッケージのバージョンを同じにしておくことは重要。&lt;br&gt;&#xA;俺はテスト通ってるけどTravisさんでは通らないとかマジいらっとするし、&#xA;バグった時の再現性とかもろもろ問題が出てくるので、環境の同期は重要。&lt;/p&gt;&#xA;&lt;p&gt;例えば、JavaではMaven+pom.xmlやGradle+build.gradle、Nodeならnpm+package.jsonなところを、&#xA;Goではどうやるんだっていう話。&lt;/p&gt;&#xA;&lt;h3 id=&#34;goで依存パッケージを取得する&#34;&gt;Goで依存パッケージを取得する&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go get github.com/google/go-github/github&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上。&lt;br&gt;&#xA;簡単。これは捗る！&lt;br&gt;&#xA;と思いきや、実際の開発ではいろいろ問題が発生する。&lt;/p&gt;&#xA;&lt;h3 id=&#34;バージョンいくつなんだよ問題&#34;&gt;バージョンいくつなんだよ問題&lt;/h3&gt;&#xA;&lt;p&gt;Goは、パッケージ取得の仕組み(&lt;code&gt;go get hoge/hoge&lt;/code&gt; のこと)は言語レベルで存在するが、&#xA;パッケージの列挙とバージョンを管理する仕組みは存在しない。&lt;br&gt;&#xA;「このプロジェクトで使われているパッケージはA(ver0.9)とB(ver1.2)である。」&lt;br&gt;&#xA;というのを表現する方法は&lt;strong&gt;無い&lt;/strong&gt;。&lt;br&gt;&#xA;よって各メンバーが、README等をみながら、&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go get A&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go get B&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go get C&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;をぽちぽちやらなくてはいけない。&lt;br&gt;&#xA;また、go get したタイミングによっては依存しているパッケージの別のバージョンが入ってしまう。&lt;br&gt;&#xA;なんてったって、go get にはバージョンを&lt;strong&gt;指定しない&lt;/strong&gt;のだから、何が落ちてきてるのかわからん。&lt;br&gt;&#xA;Goの思想としては常に最新バージョン使おうぜ、ということらしいが、&#xA;そのことと、メンバー間の環境の同期はまた別の話だよね。&lt;/p&gt;&#xA;&lt;h3 id=&#34;別のプロジェクトでも使ってる問題&#34;&gt;別のプロジェクトでも使ってる問題&lt;/h3&gt;&#xA;&lt;p&gt;Goのプロジェクトとして、AとBがあって、両方でパッケージKを使ってるとする。&lt;br&gt;&#xA;「AではK:ver1.1.2を使って、BではK:ver1.1.3を使う」&#xA;ということは&lt;strong&gt;できない&lt;/strong&gt;。&lt;br&gt;&#xA;GOPATHをそれぞれで設定しておいて、いじるときにいちいち切り替えれば出来るんだろうけど、&#xA;基本的にはGOPATHは一個だけ設定するのが良いとされているので、AとBは同じバージョンのKを参照せざるを得なくなる。&lt;br&gt;&#xA;これは辛い。。&lt;/p&gt;&#xA;&lt;h3 id=&#34;godep&#34;&gt;Godep&lt;/h3&gt;&#xA;&lt;p&gt;そこで登場するのがプロジェクト毎に依存関係を指定、管理できるツール、&lt;a href=&#34;https://github.com/tools/godep&#34;&gt;Godep&lt;/a&gt;。&lt;br&gt;&#xA;安心のGitHub製。&lt;br&gt;&#xA;そのプロジェクトで使っているパッケージとバージョン(正確にはコミットsha)を&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;godep save ./...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;で記録(その時点のスナップショット的な感じ)できる。&lt;br&gt;&#xA;新しく &lt;code&gt;Godeps&lt;/code&gt; と &lt;code&gt;Gedeps/_workspace&lt;/code&gt; というディレクトリと、&lt;code&gt;Godep.json&lt;/code&gt; というJSONファイルが生成される。&lt;br&gt;&#xA;このJSONが、mavenでいうpom.xml、npmでいうpackage.json にあたるもので、基本手動でいじらない。&lt;br&gt;&#xA;この&lt;code&gt;Godep.json&lt;/code&gt; はGitのバージョン管理対象にするが、&lt;code&gt;_workspace&lt;/code&gt; ディレクトリは.gitignoreに追記しておく。&lt;/p&gt;&#xA;&lt;p&gt;Godep.json に更新があった場合、他のメンバーは、&lt;/p&gt;</description>
    </item>
    <item>
      <title>これからGoやる人のためのGOPATH</title>
      <link>http://localhost:1313/posts/golang-env-gopath/</link>
      <pubDate>Wed, 05 Aug 2015 00:52:24 +0900</pubDate>
      <guid>http://localhost:1313/posts/golang-env-gopath/</guid>
      <description>&lt;p&gt;Goはじめて3ヶ月。&lt;br&gt;&#xA;Goいいな、Goクソだなと日々葛藤。&lt;/p&gt;&#xA;&lt;p&gt;Goをこれからはじめようという人が迷いそうな(俺が迷った)&lt;code&gt;GOPATH&lt;/code&gt; について。&lt;/p&gt;&#xA;&lt;h3 id=&#34;goのインストール&#34;&gt;Goのインストール&lt;/h3&gt;&#xA;&lt;p&gt;インストール自体はbrewで速攻終わる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew install go&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;問題はこの後の&lt;code&gt;$GOPATH&lt;/code&gt;の設定。&lt;/p&gt;&#xA;&lt;h3 id=&#34;gopathって何&#34;&gt;GOPATHって何&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://golang-jp.org/doc/code.html#GOPATH&#34;&gt;http://golang-jp.org/doc/code.html#GOPATH&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;GOPATH環境変数はワークスペースの場所を示してします。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;そのままなのだが、つまり、&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Goを書くのは全部このパス下でやってね&lt;/li&gt;&#xA;&lt;li&gt;Go書く上で依存してるライブラリのソースも全部このパスに入るよ&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;ということで、例にあるようにそのまま、&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ export GOPATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$HOME/go&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PATH:$GOPATH/bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;としているが、特に困っていない。&lt;/p&gt;&#xA;&lt;h3 id=&#34;goを書く&#34;&gt;Goを書く&lt;/h3&gt;&#xA;&lt;p&gt;じゃGo書くぜってことになるが、&lt;strong&gt;GOPATH直下に書くわけではない&lt;/strong&gt; というのがめんどくさいところ。&lt;/p&gt;&#xA;&lt;p&gt;まず、Goを書く時は、&lt;strong&gt;GitHubに公開する前提&lt;/strong&gt; と考えておいたほうがよい。&#xA;というのも、Goを書いていると頻出するが、外部ライブラリの import文はほぼ、GitHubのURLになる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 標準パッケージ&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/takecy/hoge&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// OSSのライブラリ&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;github.com/{account_name}/{repository_name}&lt;/code&gt; でimportできるステキ仕様。&#xA;そしてライブラリのメソッドとか呼び出すためには、ソースコードを取得しないといけないので、下記を実行する。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go get github.com/takecy/hoge&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ここで、&lt;code&gt;GOPATH&lt;/code&gt; が登場する。&lt;br&gt;&#xA;このライブラリがダウンロードされ、配置されるパスは&#xA;&lt;code&gt;$GOPATH/src/github.com/takecy/hoge&lt;/code&gt;&lt;br&gt;&#xA;になる。&lt;br&gt;&#xA;自分のGoのプロジェクトもこれと同じように、&#xA;&lt;code&gt;$GOPATH/src/github.com/{account_name}/{repository_name}&lt;/code&gt;&lt;br&gt;&#xA;ディレクトリを作って、そこにGoソースを作成してスタートする。&lt;/p&gt;&#xA;&lt;p&gt;GitHubで公開する気とか無いし、、と思っても、このパスで作るのがおすすめ。&lt;/p&gt;&#xA;&lt;h4 id=&#34;まとめ&#34;&gt;まとめ&lt;/h4&gt;&#xA;&lt;p&gt;Goやり始めた当初は、元々&lt;code&gt;$HOME/git&lt;/code&gt;下に全部GitHub関連入れていたので、移動したくなく、GOPATHにシンボリックリンク貼ったりとかして抵抗していたのだが、結局Go関連は、全部移動することに。。&lt;br&gt;&#xA;同じGitHubからのソースなのに、全然別のディレクトリになっているもやもやは地味にストレス。&lt;br&gt;&#xA;が、GitHubのURLをimportに書けるというのはすごくいい。&lt;br&gt;&#xA;例えばJavaでよくある、「このライブラリすごくよさそうだけど、mavenにあがってねーじゃん、、」ということもない。&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s write Go。&lt;/p&gt;&#xA;&lt;p&gt;どうでもいいけど、Goのライブラリ名はダジャレがちらほら。&lt;br&gt;&#xA;例えばRedisのドライバは &lt;a href=&#34;https://github.com/garyburd/redigo&#34;&gt;redigo&lt;/a&gt; 。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
